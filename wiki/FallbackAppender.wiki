#labels Featured,Phase-Implementation,Phase-Design,Phase-Deploy
#general details and usage for the FallbackAppender object
=What does it do?=

The `FallbackAppender` is similar to the `ForwardAppender` that comes with log4net in that it references other appenders via the `appender-ref` element. The difference is that while the `ForwardAppender` will append to all the contained appenders the `FallbackAppender` will instead queue each of the appenders and will try to append to the first in the queue if successful it will stop if it isn't successful it will try the next one in the queue and will do this until one is successful or all fail.

=Usage=

{{{
<appender name="FallbackAppender" type="log4netContrib.Appender.FallbackAppender, log4netContrib" >
    <appender-ref ref="FileAppender" />
    <appender-ref ref="ConsoleAppender" />
</appender>
}}}

Where `FileAppender` and `ConsoleAppender` are declared separately.

=Things to be aware of=

  * The appenders will be queued in the order they are placed in the XML declaration.
  * The appenders to be referenced *must inherit from `AppenderSkeleton` not just `IAppender`* I know this is a bit naff I will discuss this below
  * Once an appender has caused an error it will be ignore indefinitely, so it's worth making the next appender a push model (SMTP, MSMQ) rather than pull (File, SQL) _I want to see if I can improve on this going forward_

=How does it work?=

This explains why the appenders being referenced must inherit from `AppenderSkeleton`, appenders used in log4net don't allow exceptions to bubble up through the stack instead they log errors to an `ErrorHandler` property they all have from inheriting from `AppenderSkeleton` so in order to know whether an appender has caused an error we need to hook into this object, so I basically replace the `IErrorHandler` with a custom object so I can track when errors are caused from an appender, and can take action by using the next queued appender.